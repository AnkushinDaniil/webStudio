// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	entity "main.go/internal/entity"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockTimeslotList is a mock of TimeslotList interface.
type MockTimeslotList struct {
	ctrl     *gomock.Controller
	recorder *MockTimeslotListMockRecorder
}

// MockTimeslotListMockRecorder is the mock recorder for MockTimeslotList.
type MockTimeslotListMockRecorder struct {
	mock *MockTimeslotList
}

// NewMockTimeslotList creates a new mock instance.
func NewMockTimeslotList(ctrl *gomock.Controller) *MockTimeslotList {
	mock := &MockTimeslotList{ctrl: ctrl}
	mock.recorder = &MockTimeslotListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeslotList) EXPECT() *MockTimeslotListMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTimeslotList) Create(userID int, list entity.TimeslotsList) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, list)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTimeslotListMockRecorder) Create(userID, list any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTimeslotList)(nil).Create), userID, list)
}

// Delete mocks base method.
func (m *MockTimeslotList) Delete(userID, listID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, listID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTimeslotListMockRecorder) Delete(userID, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTimeslotList)(nil).Delete), userID, listID)
}

// GetAll mocks base method.
func (m *MockTimeslotList) GetAll(userID int) ([]entity.TimeslotsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID)
	ret0, _ := ret[0].([]entity.TimeslotsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTimeslotListMockRecorder) GetAll(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTimeslotList)(nil).GetAll), userID)
}

// GetByID mocks base method.
func (m *MockTimeslotList) GetByID(userID, listID int) (entity.TimeslotsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", userID, listID)
	ret0, _ := ret[0].(entity.TimeslotsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTimeslotListMockRecorder) GetByID(userID, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTimeslotList)(nil).GetByID), userID, listID)
}

// Update mocks base method.
func (m *MockTimeslotList) Update(userID, listID int, input entity.UpdateListInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userID, listID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTimeslotListMockRecorder) Update(userID, listID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTimeslotList)(nil).Update), userID, listID, input)
}

// MockTimeslotItem is a mock of TimeslotItem interface.
type MockTimeslotItem struct {
	ctrl     *gomock.Controller
	recorder *MockTimeslotItemMockRecorder
}

// MockTimeslotItemMockRecorder is the mock recorder for MockTimeslotItem.
type MockTimeslotItemMockRecorder struct {
	mock *MockTimeslotItem
}

// NewMockTimeslotItem creates a new mock instance.
func NewMockTimeslotItem(ctrl *gomock.Controller) *MockTimeslotItem {
	mock := &MockTimeslotItem{ctrl: ctrl}
	mock.recorder = &MockTimeslotItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeslotItem) EXPECT() *MockTimeslotItemMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTimeslotItem) Create(userID, listID int, input entity.TimeslotItem) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, listID, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTimeslotItemMockRecorder) Create(userID, listID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTimeslotItem)(nil).Create), userID, listID, input)
}

// Delete mocks base method.
func (m *MockTimeslotItem) Delete(userID, itemID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTimeslotItemMockRecorder) Delete(userID, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTimeslotItem)(nil).Delete), userID, itemID)
}

// GetAll mocks base method.
func (m *MockTimeslotItem) GetAll(userID, listID int) ([]entity.TimeslotItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID, listID)
	ret0, _ := ret[0].([]entity.TimeslotItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTimeslotItemMockRecorder) GetAll(userID, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTimeslotItem)(nil).GetAll), userID, listID)
}

// GetByID mocks base method.
func (m *MockTimeslotItem) GetByID(userID, itemID int) (entity.TimeslotItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", userID, itemID)
	ret0, _ := ret[0].(entity.TimeslotItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTimeslotItemMockRecorder) GetByID(userID, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTimeslotItem)(nil).GetByID), userID, itemID)
}

// Update mocks base method.
func (m *MockTimeslotItem) Update(userID, itemID int, input entity.UpdateItemInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userID, itemID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTimeslotItemMockRecorder) Update(userID, itemID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTimeslotItem)(nil).Update), userID, itemID, input)
}
