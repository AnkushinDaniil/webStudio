package rest

import (
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware

	// Package docs Code generated by swaggo/swag.
	_ "main.go/docs"
	"main.go/internal/service"
)

type Handlers struct {
	*AuthorizationHandler
	*TimeslotListHandler
	*TimeslotItemHandler
}

func NewHandlers(services *service.Service) *Handlers {
	return &Handlers{
		AuthorizationHandler: NewAuthorizationHandler(services.Authorization),
		TimeslotListHandler:  NewTimeslotListHandler(services.TimeslotList),
		TimeslotItemHandler:  NewTimeslotItemHandler(services.TimeslotItem),
	}
}

func (h *Handlers) InitRoutes() *gin.Engine {
	router := gin.New()

	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	auth := router.Group("/auth")
	{
		auth.POST("/sign-up", h.AuthorizationHandler.signUp)
		auth.POST("/sign-in", h.AuthorizationHandler.signIn)
	}

	api := router.Group("/api", h.userIdentity)
	{
		lists := api.Group("/lists")
		{
			lists.POST("/", h.TimeslotListHandler.createList)
			lists.GET("/", h.TimeslotListHandler.getAllLists)
			lists.GET("/:id", h.TimeslotListHandler.getListByID)
			lists.PUT("/:id", h.TimeslotListHandler.updateList)
			lists.DELETE("/:id", h.TimeslotListHandler.deleteList)

			items := lists.Group(":id/items")
			{
				items.POST("/", h.TimeslotItemHandler.createItem)
				items.GET("/", h.TimeslotItemHandler.getAllItems)
			}
		}
		items := api.Group("/items")
		{
			items.GET("/:id", h.TimeslotItemHandler.getItemByID)
			items.PUT("/:id", h.TimeslotItemHandler.updateItem)
			items.DELETE("/:id", h.TimeslotItemHandler.deleteItem)
		}
	}

	return router
}
