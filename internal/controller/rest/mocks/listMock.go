// Code generated by MockGen. DO NOT EDIT.
// Source: list.go
//
// Generated by this command:
//
//	mockgen -source=list.go -destination=mocks/listMock.go
//

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	entity "main.go/internal/entity"
)

// MockTimeslotListService is a mock of TimeslotListService interface.
type MockTimeslotListService struct {
	ctrl     *gomock.Controller
	recorder *MockTimeslotListServiceMockRecorder
}

// MockTimeslotListServiceMockRecorder is the mock recorder for MockTimeslotListService.
type MockTimeslotListServiceMockRecorder struct {
	mock *MockTimeslotListService
}

// NewMockTimeslotListService creates a new mock instance.
func NewMockTimeslotListService(ctrl *gomock.Controller) *MockTimeslotListService {
	mock := &MockTimeslotListService{ctrl: ctrl}
	mock.recorder = &MockTimeslotListServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeslotListService) EXPECT() *MockTimeslotListServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTimeslotListService) Create(userID int, list entity.TimeslotsList) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, list)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTimeslotListServiceMockRecorder) Create(userID, list any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTimeslotListService)(nil).Create), userID, list)
}

// Delete mocks base method.
func (m *MockTimeslotListService) Delete(userID, listID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, listID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTimeslotListServiceMockRecorder) Delete(userID, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTimeslotListService)(nil).Delete), userID, listID)
}

// GetAll mocks base method.
func (m *MockTimeslotListService) GetAll(userID int) ([]entity.TimeslotsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID)
	ret0, _ := ret[0].([]entity.TimeslotsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTimeslotListServiceMockRecorder) GetAll(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTimeslotListService)(nil).GetAll), userID)
}

// GetByID mocks base method.
func (m *MockTimeslotListService) GetByID(userID, listID int) (entity.TimeslotsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", userID, listID)
	ret0, _ := ret[0].(entity.TimeslotsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTimeslotListServiceMockRecorder) GetByID(userID, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTimeslotListService)(nil).GetByID), userID, listID)
}

// Update mocks base method.
func (m *MockTimeslotListService) Update(userID, listID int, input entity.UpdateListInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userID, listID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTimeslotListServiceMockRecorder) Update(userID, listID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTimeslotListService)(nil).Update), userID, listID, input)
}
