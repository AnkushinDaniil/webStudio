// Code generated by MockGen. DO NOT EDIT.
// Source: item.go
//
// Generated by this command:
//
//	mockgen -source=item.go -destination=mocks/itemMock.go
//

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	entity "main.go/internal/entity"
)

// MockTimeslotItemService is a mock of TimeslotItemService interface.
type MockTimeslotItemService struct {
	ctrl     *gomock.Controller
	recorder *MockTimeslotItemServiceMockRecorder
}

// MockTimeslotItemServiceMockRecorder is the mock recorder for MockTimeslotItemService.
type MockTimeslotItemServiceMockRecorder struct {
	mock *MockTimeslotItemService
}

// NewMockTimeslotItemService creates a new mock instance.
func NewMockTimeslotItemService(ctrl *gomock.Controller) *MockTimeslotItemService {
	mock := &MockTimeslotItemService{ctrl: ctrl}
	mock.recorder = &MockTimeslotItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeslotItemService) EXPECT() *MockTimeslotItemServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTimeslotItemService) Create(userID, listID int, input entity.TimeslotItem) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, listID, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTimeslotItemServiceMockRecorder) Create(userID, listID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTimeslotItemService)(nil).Create), userID, listID, input)
}

// Delete mocks base method.
func (m *MockTimeslotItemService) Delete(userID, itemID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTimeslotItemServiceMockRecorder) Delete(userID, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTimeslotItemService)(nil).Delete), userID, itemID)
}

// GetAll mocks base method.
func (m *MockTimeslotItemService) GetAll(userID, listID int) ([]entity.TimeslotItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID, listID)
	ret0, _ := ret[0].([]entity.TimeslotItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTimeslotItemServiceMockRecorder) GetAll(userID, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTimeslotItemService)(nil).GetAll), userID, listID)
}

// GetByID mocks base method.
func (m *MockTimeslotItemService) GetByID(userID, itemID int) (entity.TimeslotItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", userID, itemID)
	ret0, _ := ret[0].(entity.TimeslotItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTimeslotItemServiceMockRecorder) GetByID(userID, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTimeslotItemService)(nil).GetByID), userID, itemID)
}

// Update mocks base method.
func (m *MockTimeslotItemService) Update(userID, itemID int, input entity.UpdateItemInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userID, itemID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTimeslotItemServiceMockRecorder) Update(userID, itemID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTimeslotItemService)(nil).Update), userID, itemID, input)
}
